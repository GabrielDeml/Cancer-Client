{"version":3,"sources":["test.jpg","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","msg","this","setState","imgRef","a","require","img","tf","fromPixels","current","smallImg","resizeBilinear","resized","t4d","Array","from","dataSync","model","predictions","predict","value","console","log","React","createRef","className","type","accept","onChange","e","file","target","files","reader","FileReader","onload","src","result","readAsDataURL","ref","multiple","cat","onClick","testML","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wWAAe,GCAA,IDAA,IAA0B,kC,0BEsF1BA,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAQ,CAAEC,IAAK,IAJH,E,+CAUnB,WAGEC,KAAKC,SAAS,CAAEF,IAAK,O,2DAIvB,WAAaG,GAAb,2BAAAC,EAAA,6DAGoBC,EAAQ,KAEpBC,EAAMC,IAAWC,WAAWL,EAAOM,SAEnCC,EAAWH,IAASI,eAAeL,EAAK,CAAC,IAAK,MAC9CM,EAAUL,IAAQG,EAAU,WAC5BG,EAAMN,IAAYO,MAAMC,KAAKH,EAAQI,YAAa,CAAC,EAAG,IAAK,IAAK,IATxE,SAcsBT,IAAmB,iEAdzC,OAcQU,EAdR,OAkBQC,EAAcD,EAAME,QAAQN,GAE5BO,EAAQF,EAAYF,WAE1BK,QAAQC,IAAI,iBACZD,QAAQC,IAAIF,GACI,GAAZA,EAAM,GACRnB,KAAKC,SAAS,CAAEF,IAAK,cAErBC,KAAKC,SAAS,CAAEF,IAAK,WA3BzB,iD,2EA+BA,WAAU,IAAD,OACDG,EAASoB,IAAMC,YAarB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6EACA,uBAAOC,KAAK,OAAOC,OAAO,UAAUC,SAhBhB,SAAAC,GAAM,IACvBC,EADsB,YACdD,EAAEE,OAAOC,MADK,MAE7B,GAAIF,EAAM,CACR,IAAMG,EAAS,IAAIC,WACXzB,EAAYN,EAAZM,QACRA,EAAQqB,KAAOA,EACfG,EAAOE,OAAS,SAAAN,GACdpB,EAAQ2B,IAAMP,EAAEE,OAAOM,QAEzBJ,EAAOK,cAAcR,KAO8CS,IAAKpC,EAAQqC,SAAS,UACvF,qBAAKJ,IAAKK,EAAKF,IAAKpC,IACpB,wBAAQuC,QAAS,kBAAM,EAAKC,OAAOxC,IAAnC,uBACA,4BAAIF,KAAKF,MAAMC,e,GAvEP4C,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4c511dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/test.577f325d.jpg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport cat from './test.jpg';\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    // Set initial state \n    this.state = { msg: '' }\n\n    // Binding this keyword \n    // this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n\n    // Changing state \n    this.setState({ msg: '' })\n  }\n\n  // TODO: Figure out why this isn't being deffined\n  async testML(imgRef) {\n\n\n    const mobilenet = require('@tensorflow-models/mobilenet');\n\n    const img = tf.browser.fromPixels(imgRef.current);\n\n    const smallImg = tf.image.resizeBilinear(img, [224, 224]);\n    const resized = tf.cast(smallImg, 'float32');\n    const t4d = tf.tensor4d(Array.from(resized.dataSync()), [1, 224, 224, 3])\n    // img.reshape(1, 224, 224, 3)\n\n    // Load the model.\n    // const model = await mobilenet.load();\n    const model = await tf.loadLayersModel('https://gabrieldeml.github.io/Cancer-Client/models/model.json');\n\n\n    // Classify the image.\n    const predictions = model.predict(t4d);\n\n    const value = predictions.dataSync()\n    // TODO show user the output of the predcition\n    console.log('Predictions: ');\n    console.log(value);\n    if (value[0] == 0) {\n      this.setState({ msg: 'malignant' })\n    } else {\n      this.setState({ msg: 'Benign' })\n    }\n  }\n\n  render() {\n    const imgRef = React.createRef();\n    const handleImageUpload = e => {\n      const [file] = e.target.files;\n      if (file) {\n        const reader = new FileReader();\n        const { current } = imgRef;\n        current.file = file;\n        reader.onload = e => {\n          current.src = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>This isn't medical advice it just is a test</h1>\n          <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} ref={imgRef} multiple=\"false\" />\n          <img src={cat} ref={imgRef} />\n          <button onClick={() => this.testML(imgRef)}>Run model</button>\n          <p>{this.state.msg}</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}